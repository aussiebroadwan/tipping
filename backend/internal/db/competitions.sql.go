// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: competitions.sql

package db

import (
	"context"
)

const getCompetitionByID = `-- name: GetCompetitionByID :one
SELECT id, name FROM competitions WHERE id = $1
`

// Retrieve a specific competition by its unique identifier.
func (q *Queries) GetCompetitionByID(ctx context.Context, id int64) (*Competition, error) {
	row := q.db.QueryRow(ctx, getCompetitionByID, id)
	var i Competition
	err := row.Scan(&i.ID, &i.Name)
	return &i, err
}

const listCompetitions = `-- name: ListCompetitions :many

SELECT id, name FROM competitions
`

// The competitions table is a static table that stores information about the
// competitions that are available in the system. Other tables in the system
// reference this table to establish a relationship.
// Retrieve all competitions available in the system.
func (q *Queries) ListCompetitions(ctx context.Context) ([]*Competition, error) {
	rows, err := q.db.Query(ctx, listCompetitions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Competition
	for rows.Next() {
		var i Competition
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
