// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: match_details.sql

package sqlc

import (
	"context"
)

const createMatchDetail = `-- name: CreateMatchDetail :one
INSERT INTO match_details (
  fixture_id, homeTeam_id, awayTeam_id, homeTeam_odds, awayTeam_odds, 
  homeTeam_score, awayTeam_score, homeTeam_form, awayTeam_form, winner_teamId
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
)
RETURNING fixture_id, hometeam_id, awayteam_id, hometeam_odds, awayteam_odds, hometeam_score, awayteam_score, hometeam_form, awayteam_form, winner_teamid
`

type CreateMatchDetailParams struct {
	FixtureID     int32
	HometeamID    int32
	AwayteamID    int32
	HometeamOdds  *float64
	AwayteamOdds  *float64
	HometeamScore *int32
	AwayteamScore *int32
	HometeamForm  *string
	AwayteamForm  *string
	WinnerTeamid  *int32
}

// Insert a new match detail record into the match_details table.
// If a match detail with the same fixture_id already exists, do nothing.
func (q *Queries) CreateMatchDetail(ctx context.Context, arg CreateMatchDetailParams) (*MatchDetail, error) {
	row := q.db.QueryRow(ctx, createMatchDetail,
		arg.FixtureID,
		arg.HometeamID,
		arg.AwayteamID,
		arg.HometeamOdds,
		arg.AwayteamOdds,
		arg.HometeamScore,
		arg.AwayteamScore,
		arg.HometeamForm,
		arg.AwayteamForm,
		arg.WinnerTeamid,
	)
	var i MatchDetail
	err := row.Scan(
		&i.FixtureID,
		&i.HometeamID,
		&i.AwayteamID,
		&i.HometeamOdds,
		&i.AwayteamOdds,
		&i.HometeamScore,
		&i.AwayteamScore,
		&i.HometeamForm,
		&i.AwayteamForm,
		&i.WinnerTeamid,
	)
	return &i, err
}

const getMatchDetailsByFixtureID = `-- name: GetMatchDetailsByFixtureID :one
SELECT fixture_id, hometeam_id, awayteam_id, hometeam_odds, awayteam_odds, hometeam_score, awayteam_score, hometeam_form, awayteam_form, winner_teamid FROM match_details WHERE fixture_id = $1
`

// Retrieve match details for a specific fixture by its unique fixture ID.
func (q *Queries) GetMatchDetailsByFixtureID(ctx context.Context, fixtureID int32) (*MatchDetail, error) {
	row := q.db.QueryRow(ctx, getMatchDetailsByFixtureID, fixtureID)
	var i MatchDetail
	err := row.Scan(
		&i.FixtureID,
		&i.HometeamID,
		&i.AwayteamID,
		&i.HometeamOdds,
		&i.AwayteamOdds,
		&i.HometeamScore,
		&i.AwayteamScore,
		&i.HometeamForm,
		&i.AwayteamForm,
		&i.WinnerTeamid,
	)
	return &i, err
}

const listMatchDetails = `-- name: ListMatchDetails :many
SELECT fixture_id, hometeam_id, awayteam_id, hometeam_odds, awayteam_odds, hometeam_score, awayteam_score, hometeam_form, awayteam_form, winner_teamid FROM match_details
`

// Retrieve all match details available in the system.
func (q *Queries) ListMatchDetails(ctx context.Context) ([]*MatchDetail, error) {
	rows, err := q.db.Query(ctx, listMatchDetails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*MatchDetail
	for rows.Next() {
		var i MatchDetail
		if err := rows.Scan(
			&i.FixtureID,
			&i.HometeamID,
			&i.AwayteamID,
			&i.HometeamOdds,
			&i.AwayteamOdds,
			&i.HometeamScore,
			&i.AwayteamScore,
			&i.HometeamForm,
			&i.AwayteamForm,
			&i.WinnerTeamid,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMatchDetail = `-- name: UpdateMatchDetail :one
UPDATE match_details 
SET 
    homeTeam_id = COALESCE($2, homeTeam_id), 
    awayTeam_id = COALESCE($3, awayTeam_id), 
    homeTeam_odds = COALESCE($4, homeTeam_odds), 
    awayTeam_odds = COALESCE($5, awayTeam_odds), 
    homeTeam_score = COALESCE($6, homeTeam_score), 
    awayTeam_score = COALESCE($7, awayTeam_score), 
    homeTeam_form = COALESCE($8, homeTeam_form), 
    awayTeam_form = COALESCE($9, awayTeam_form), 
    winner_teamId = COALESCE($10, winner_teamId)
WHERE fixture_id = $1
RETURNING fixture_id, hometeam_id, awayteam_id, hometeam_odds, awayteam_odds, hometeam_score, awayteam_score, hometeam_form, awayteam_form, winner_teamid
`

type UpdateMatchDetailParams struct {
	FixtureID     int32
	HometeamID    int32
	AwayteamID    int32
	HometeamOdds  *float64
	AwayteamOdds  *float64
	HometeamScore *int32
	AwayteamScore *int32
	HometeamForm  *string
	AwayteamForm  *string
	WinnerTeamid  *int32
}

// Conditionally update match detail fields based on provided arguments.
// Only updates fields where the argument is not NULL.
func (q *Queries) UpdateMatchDetail(ctx context.Context, arg UpdateMatchDetailParams) (*MatchDetail, error) {
	row := q.db.QueryRow(ctx, updateMatchDetail,
		arg.FixtureID,
		arg.HometeamID,
		arg.AwayteamID,
		arg.HometeamOdds,
		arg.AwayteamOdds,
		arg.HometeamScore,
		arg.AwayteamScore,
		arg.HometeamForm,
		arg.AwayteamForm,
		arg.WinnerTeamid,
	)
	var i MatchDetail
	err := row.Scan(
		&i.FixtureID,
		&i.HometeamID,
		&i.AwayteamID,
		&i.HometeamOdds,
		&i.AwayteamOdds,
		&i.HometeamScore,
		&i.AwayteamScore,
		&i.HometeamForm,
		&i.AwayteamForm,
		&i.WinnerTeamid,
	)
	return &i, err
}
